void sieve(){
    const int N = 10000000;
    int lp[N+1];
    vector<int> pr;
    for (int i=2; i<=N; ++i) {
        if (lp[i] == 0) {
            lp[i] = i;
            pr.push_back (i);
        }
        for (int j=0; j<(int)pr.size() && pr[j]<=lp[i] && i*pr[j]<=N; ++j)
            lp[i * pr[j]] = pr[j];
    }
}

****************************************************************************************************************************************

class fenwicktree{
    public :
    int n;
    int b[100005];

    fenwicktree(int N){
        n=N;
        fore(i,0,n) b[i]=0;
    }

    int sum(int idx) {
        int ret = 0;
        for (idx; idx >0; idx -= (idx & -idx))
            ret += b[idx];
        return ret;
    }

    void add(int idx, int delta) {
        for (idx; idx <= n; idx += (idx & -idx))
            b[idx] += delta;
    }
};
 
void solve(){
    fenwicktree f(n);
    rfor(i,n,1){
        f.add(p[i],1);
    }
}


****************************************************************************************************************************************

class trie{
    public : 
    trie *child[26];
    bool isend;

    trie(){
        this->isend= false;
        fo(26) this->child[i]=NULL;   
    }

    bool insert( string s ){     // inserts and checks if the word was already in the trie.
        bool p=false;
        trie* curr = this;
        fo(s.length()){
            if(! curr->child[s[i]-'a']) p=true,curr->child[s[i]-'a'] = new trie();
            curr= curr->child[s[i]-'a'];
        }
        if(curr->isend==true && !p) return false;
        curr->isend=true;
        return true; 
    }

    bool search( string s ){
        trie* curr = this;
        fo(s.length()){
            if(! curr->child[s[i]-'a']) return false;
            curr= curr->child[s[i]-'a'];
        }
        if(!curr || !curr->isend) return false;
        return true;
    }
};

void solve(){
    string s;
    trie* root =new trie();
    root->insert(s);
}

****************************************************************************************************************************************

void mos(){
    sort(q.begin() , q.end());
    ll res[t+1];
    ll l=0,r=-1;
    fo(t){
        ll cl = q[i].ff, cr = q[i].ss;
        while(r < cr){
            r++;
            ans -= freq[a[r]]*freq[a[r]]*a[r];
            freq[a[r]]++;
            ans += freq[a[r]] * freq[a[r]]*a[r];
        }
        while(l > cl){
            l--;
            ans-=freq[a[l]]*freq[a[l]]*a[l];
            freq[a[l]]++;
            ans += freq[a[l]]*freq[a[l]]*a[l];
        }
        while(l < cl){
            ans-=freq[a[l]]*freq[a[l]]*a[l];
            freq[a[l]]--;
            ans += freq[a[l]]*freq[a[l]]*a[l];
            l++;
        }
        while(r > cr){
            ans -= freq[a[r]]*freq[a[r]]*a[r];
            freq[a[r]]--;
            ans += freq[a[r]] * freq[a[r]]*a[r];
            r--;
        }
        res[q[i].ind] = ans;
    }
}

****************************************************************************************************************************************

void make_set(int v) {
    par[v] = v;
}

int find_set(int v) {
    if (v == par[v]) return v;
    return par[v] = find_set(par[v]);
}

void union_sets(int a, int b) {
    a = find_set(a);
    b = find_set(b);
    if(a==b) return;
    if (sz[a] < sz[b]) swap (a , b);
    par[b] = a;
    sz[a]+=sz[b];
}

****************************************************************************************************************************************

void build(){
    for(int i = 0 ; i <n ; i++ ) m[i][0] = a[i];
    for(int j = 1 ; (1<<j) <= n ; j++){
        for(int i = 0 ;i + (1<<j) -1 < n ; i++  ){
            m[i][j] = gcd(m[i][j-1] , m[i+(1<<(j-1))][j-1]);
        }
    }
}

int query(int l ,int r){
    int k = log2(r-l+1);
    return gcd(m[l][k] , m[r-(1<<k)+1][k]);
}

*****************************************************************************************************************************************

